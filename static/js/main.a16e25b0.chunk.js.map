{"version":3,"sources":["pages/About.js","API/User.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["fruitList","About","location","useLocation","history","useHistory","useState","arrFav","setArrFav","user","setUser","useEffect","state","push","pathname","alert","items","JSON","parse","localStorage","getItem","addFavorite","fruit","temp","slice","setItem","stringify","removeFavorite","index","indexOf","splice","FruitCard","props","Grid","container","item","xs","onClick","e","type","direction","Typography","variant","component","spacing","sort","map","includes","key","Button","color","users","username","password","User","match","arrLocation","split","length","selectedUser","filter","response","favorited","Home","pass","setPass","onSubmit","a","width","style","textAlign","TextField","id","label","placeholder","value","onChange","target","App","path","exact","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a16e25b0.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Grid, Typography, Button } from \"@material-ui/core\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\"\r\n\r\nconst fruitList = [\"Pineapple\", \"Peach\", \"Apple\", \"Watermelon\", \"Melon\", \"Guava\", \"Banana\", \"Orange\", \"Grape\", \"Kiwi\", \"Blueberry\", \"Blackberry\", \"Pear\", \"Tangerine\", \"Plum\", \"Mango\", \"Date\", \"Cantaloupe\", \"Strawberry\", \"Coconut\"]\r\n\r\nconst About = () => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const [arrFav, setArrFav] = useState([]);\r\n  const [user, setUser] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (!location.state) {\r\n      history.push({ pathname: \"/home\" })\r\n      alert(\"need to login\")\r\n      return;\r\n    }\r\n    const items = JSON.parse(localStorage.getItem(location.state.user));\r\n    setUser(location.state.user);\r\n    if (items) {\r\n      setArrFav(items);\r\n      return;\r\n    }\r\n    setArrFav([]);\r\n  }, []);\r\n\r\n  const addFavorite = (fruit) => {\r\n    var temp = arrFav.slice();\r\n    temp.push(fruit)\r\n    setArrFav(temp);\r\n\r\n    localStorage.setItem(user, JSON.stringify(temp));\r\n  }\r\n\r\n  const reset = () => {\r\n    setArrFav([]);\r\n    localStorage.setItem(user, JSON.stringify([]));\r\n  }\r\n\r\n  const removeFavorite = (fruit) => {\r\n    var index = arrFav.indexOf(fruit);\r\n    if (index !== -1) {\r\n      arrFav.splice(index, 1);\r\n    }\r\n    // set new array reference to rerender \r\n    var temp = arrFav.slice();\r\n    setArrFav(temp);\r\n    localStorage.setItem(user, JSON.stringify(temp));\r\n  }\r\n\r\n  function FruitCard(props) {\r\n    return (\r\n      <Grid container item xs={3}>\r\n        <Grid item xs={9}>\r\n          {props.fruit}\r\n        </Grid>\r\n        <Grid item xs={3}>\r\n          <button onClick={e => props.onClick(props.fruit)}>\r\n            {props.type === \"remove\" ? \"X\" : \"+\"}\r\n          </button>\r\n        </Grid>\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Grid container direction=\"column\">\r\n      <Typography variant=\"h1\" component=\"h2\">\r\n        {user}'s Favorite Fruit\r\n      </Typography>\r\n\r\n      <Grid container item spacing={2}>\r\n        <Grid container item xs={12}>\r\n          {fruitList.sort().map((fruit) =>\r\n            arrFav.includes(fruit) ?\r\n              null\r\n              :\r\n              <FruitCard fruit={fruit} onClick={addFavorite} key={\"fruitCard\" + fruit + \"add\"} />\r\n          )}\r\n        </Grid>\r\n\r\n        <Grid item >\r\n          <Button onClick={e => reset()} color={\"primary\"} variant=\"contained\">Reset pallate</Button>\r\n        </Grid>\r\n\r\n        <Grid container item xs={12} >\r\n          {arrFav.sort().map((fruit) =>\r\n            <FruitCard fruit={fruit} onClick={removeFavorite} type={\"remove\"} key={\"fruitCard\" + fruit + \"remove\"} />\r\n          )}\r\n        </Grid>\r\n\r\n        <Grid item >\r\n          <Button onClick={e => history.push({ pathname: \"/home\" })} color={\"primary\"} variant=\"contained\">Logout</Button>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","export const users = [\r\n    { username: \"user\", password: \"test1234\" },\r\n    { username: \"user2\", password: \"pass1234\" },\r\n    { username: \"michael\", password: \"tengganus\" },\r\n    { username: \"t\", password: \"t\" }\r\n]\r\n\r\n\r\nexport const User = ({ match, location }) => {\r\n    const arrLocation = location.pathname.split('/');\r\n    if (arrLocation.length < 4) {\r\n        return null;\r\n    }\r\n\r\n    const selectedUser = users.filter(e => { return e.username === arrLocation[2] });\r\n    if (selectedUser[0].password === arrLocation[3]) {\r\n\r\n        const items = JSON.parse(localStorage.getItem(selectedUser[0].username));\r\n        let response = {\r\n            username: selectedUser[0].username,\r\n            favorited: items\r\n        }\r\n\r\n        return JSON.stringify(response);\r\n    }\r\n\r\n    return null;\r\n}","import React, { useState } from \"react\";\r\nimport { Grid, Typography, TextField, Button } from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { users } from \"../API/User\"\r\nimport axios from \"axios\";\r\n\r\nconst Home = () => {\r\n  const history = useHistory();\r\n  const [user, setUser] = useState(\"\");\r\n  const [pass, setPass] = useState(\"\");\r\n\r\n  const onSubmit = async () => {\r\n    const selectedUser = users.filter(e => { return e.username === user });\r\n    if (selectedUser.length > 0 && selectedUser[0].password === pass) {\r\n      history.push({ pathname: \"/about\", state: { user } })\r\n      return;\r\n    }\r\n\r\n    alert(\"incorrect user or password\")\r\n  }\r\n\r\n  return (\r\n    <Grid container width={\"50vw\"} style={{ textAlign: \"Center\" }} spacing={1}>\r\n      <Grid item xs={12}>\r\n        <Typography>\r\n          Favorite Fruit App\r\n        </Typography>\r\n      </Grid>\r\n\r\n      <Grid item xs={12}>\r\n        <TextField\r\n          id=\"outlined-name\"\r\n          label=\"User\"\r\n          placeholder=\"username\"\r\n          value={user}\r\n          onChange={e => setUser(e.target.value)}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} >\r\n        <TextField\r\n          id=\"outlined-name\"\r\n          label=\"Pass\"\r\n          placeholder=\"password\"\r\n          value={pass}\r\n          onChange={e => setPass(e.target.value)}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Button onClick={onSubmit} color={\"primary\"} variant=\"contained\">Submit</Button>\r\n      </Grid>\r\n    </Grid >\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport About from \"./pages/About\";\r\nimport Home from \"./pages/Home\";\r\nimport { User } from \"./API/User\";\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/about\">\r\n          <About />\r\n        </Route>\r\n        <Route exact path=\"/users/:username/:password\" component={User}/>\r\n        <Route path=\"/\">\r\n          <Home />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport \"typeface-roboto\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n  ,document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}